@model DinFlow.Models.Despesa

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Despesa</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Descricao, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Descricao, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Descricao, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Valor, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Valor, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Valor, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="mb-3">
            <label for="dataReceita" class="form-label">Data</label>
            <input type="date" class="form-control" id="dataReceita" name="Data" required>
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Categoria", htmlAttributes: new { @class = "control-label" })
        <div class="col-md-10" style="display: flex; align-items: center;">
            @Html.DropDownList("CategoriaId", ViewBag.Categorias as SelectList, "Selecione uma categoria...", new { @class = "form-control", id = "categoriaDropdownDespesa" })
            <button type="button" class="btn btn-success addCategoriaBtn">+</button>
        </div>
        @Html.ValidationMessage("CategoriaId", "", new { @class = "text-danger" })
    </div>

    <div class="form-group" style="padding-top: 10px; padding-right:10px">
        <a class="btn btn-sm btn-primary" title="Back to List" role="button" href="@Url.Action("Index")">
            <i class="bi bi-arrow-left"></i> Voltar
        </a>
        <input type="submit" value="Create" class="btn btn-sm btn-success text-white" />

    </div>
</div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    $(document).ready(function () {
        // Adicionar nova categoria
        $('.addCategoriaBtn').on('click', function () {
            var novaCategoria = prompt('Digite o nome da nova categoria:');
            if (novaCategoria) {
                $.ajax({
                    url: '@Url.Action("AdicionarCategoria", "Categorias")',
                    method: 'POST',
                    data: { nomeCategoria: novaCategoria },
                    success: function (response) {
                        $('#categoriaDropdown, #categoriaDropdownDespesa').append($('<option>', {
                            value: response.categoriaId,
                            text: response.nomeCategoria
                        }));
                        alert('Categoria adicionada com sucesso!');
                    },
                    error: function () {
                        alert('Erro ao adicionar categoria.');
                    }
                });
            }
        });

        // Toggle collapse
        $('.toggle-collapse').on('click', function () {
            const target = $(this).data('target');
            $(target).collapse('toggle');
            $(this).find('i').toggleClass('fa-chevron-right fa-chevron-down');
        });
        // Aplicar tema do localStorage ao carregar a página
        document.addEventListener('DOMContentLoaded', function () {
            const darkMode = localStorage.getItem('darkMode');
            const body = document.body;

            if (darkMode === 'enabled') {
                body.classList.add('dark-mode');
            }

            // Configuração do botão de alternância de tema
            const themeToggle = document.getElementById('theme-toggle');
            themeToggle.addEventListener('click', function () {
                body.classList.toggle('dark-mode');
                const isDarkMode = body.classList.contains('dark-mode');
                localStorage.setItem('darkMode', isDarkMode ? 'enabled' : 'disabled');
            });
        });

    });
</script>

}
